name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --all --all-features --verbose
    
    - name: Run doc tests
      run: cargo test --doc --all-features

  rust-coverage:
    name: Rust Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --all-features --workspace --timeout 600 --out xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run linter
      run: pnpm lint
      working-directory: packages/dashboard
    
    - name: Build dashboard
      run: pnpm build
      working-directory: packages/dashboard
    
    # Tests will be enabled once they're added
    # - name: Run tests
    #   run: pnpm test:coverage
    #   working-directory: packages/dashboard

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: |
        # Retry cargo audit up to 3 times to handle network issues
        for i in {1..3}; do
          if cargo audit; then
            echo "‚úÖ Cargo audit passed on attempt $i"
            break
          else
            echo "‚ùå Cargo audit failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "üö® Cargo audit failed after 3 attempts"
              exit 1
            fi
            echo "‚è≥ Retrying in 10 seconds..."
            sleep 10
          fi
        done
    
    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run pnpm audit
      run: |
        echo "üîç Running pnpm audit for production dependencies..."
        if pnpm audit --prod; then
          echo "‚úÖ pnpm audit passed - no vulnerabilities found"
        else
          echo "‚ö†Ô∏è pnpm audit found issues, but continuing (configured to not fail CI)"
        fi
      continue-on-error: true # Don't fail CI on audit warnings

  build-check:
    name: Build Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build all packages
      run: cargo build --all --release

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: |
        pnpm install
        cargo build --all
    
    - name: Start services
      run: |
        cargo run -p orkee-cli --bin orkee -- dashboard --port 4001 &
        sleep 5
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:4001/api/health || exit 1
        curl -f http://localhost:4001/api/status || exit 1
    
    - name: Stop services
      run: pkill -f orkee || true