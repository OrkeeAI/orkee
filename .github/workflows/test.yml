name: CI

on:
  push:
    branches: [ main, tauri ]
  pull_request:
    branches: [ main, tauri ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast feedback - Web tests only (dashboard lint & build)
  # Runs in ~2-3 minutes, provides quick feedback for frontend changes
  test-web:
    name: Test Web (Dashboard)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Setup Bun
      uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
      with:
        bun-version: "1.2.23"

    - name: Cache Bun dependencies
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install

    - name: Lint dashboard
      run: bun run lint --filter=@orkee/dashboard

    - name: Test prompts package
      run: |
        cd packages/prompts
        bun test

    - name: Build dashboard
      run: bun run build --filter=@orkee/dashboard

    - name: Check bundle size
      run: |
        echo "Dashboard bundle size:"
        du -sh packages/dashboard/dist
        echo ""
        echo "Largest files:"
        find packages/dashboard/dist -type f -exec du -h {} + | sort -rh | head -10

  # Rust tests - CLI and server packages
  # Runs in parallel with test-web for faster feedback
  test-rust:
    name: Test Rust (CLI & Server)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Free up disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        echo "Disk space after cleanup:"
        df -h

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # stable
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.7
      with:
        workspaces: ". -> target"
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Install cargo-nextest
      uses: taiki-e/install-action@331a600f1b10a3fed8dc56f925012bede91ae51f # v2.44.13
      with:
        tool: cargo-nextest

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy (CLI & Server)
      run: cargo clippy --workspace --all-targets --no-deps -- -D warnings

    - name: Run Rust tests (CLI & Server)
      # Note: SQLx compile-time query verification happens automatically during tests
      # since tests create a real database with migrations
      # Using cargo-nextest for 60-70% faster parallel test execution
      run: cargo nextest run --workspace --all-targets

  # Tauri tests - Desktop app with system dependencies
  # Longer running due to Tauri framework overhead
  # Only runs on release branches to save CI resources
  test-tauri:
    name: Test Tauri (Desktop App)
    runs-on: ${{ matrix.platform }}
    if: startsWith(github.ref, 'refs/heads/release/')
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # stable
      with:
        toolchain: stable

    - name: Install Linux dependencies
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: Cache Rust dependencies
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tauri-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-tauri-

    - name: Prepare CLI binary for Tauri
      run: bash packages/dashboard/prepare-binaries.sh

    - name: Run Clippy (Tauri)
      run: cargo clippy --package orkee-desktop -- -D warnings
      working-directory: packages/dashboard/src-tauri

    - name: Run Tauri tests
      run: cargo test
      working-directory: packages/dashboard/src-tauri

  # Summary job - required for branch protection
  # This job succeeds only if all test jobs pass or are skipped
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test-web, test-rust, test-tauri]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-web.result }}" != "success" ]; then
            echo "test-web failed"
            exit 1
          fi
          if [ "${{ needs.test-rust.result }}" != "success" ]; then
            echo "test-rust failed"
            exit 1
          fi
          # Allow test-tauri to be skipped (when not on release branch) or successful
          if [ "${{ needs.test-tauri.result }}" != "success" ] && [ "${{ needs.test-tauri.result }}" != "skipped" ]; then
            echo "test-tauri failed"
            exit 1
          fi
          echo "All tests passed!"
