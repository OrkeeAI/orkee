name: CI

on:
  push:
    branches: [ main, tauri ]
  pull_request:
    branches: [ main, tauri ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast feedback - Web tests only (dashboard lint & build)
  # Runs in ~2-3 minutes, provides quick feedback for frontend changes
  test-web:
    name: Test Web (Dashboard)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Setup Bun
      uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
      with:
        bun-version: "1.2.23"

    - name: Cache Bun dependencies
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: ${{ runner.os }}-bun-

    - name: Install dashboard dependencies
      run: |
        cd packages/dashboard
        bun install

    - name: Lint dashboard
      run: bun run lint
      working-directory: packages/dashboard

    - name: Build dashboard
      run: bun run build
      working-directory: packages/dashboard

    - name: Check bundle size
      run: |
        echo "Dashboard bundle size:"
        du -sh packages/dashboard/dist
        echo ""
        echo "Largest files:"
        find packages/dashboard/dist -type f -exec du -h {} + | sort -rh | head -10

  # Rust tests - CLI and server packages
  # Runs in parallel with test-web for faster feedback
  test-rust:
    name: Test Rust (CLI & Server)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # stable
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-rust-

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy (CLI & Server)
      run: |
        cargo clippy --package orkee-cli -- -D warnings
        cargo clippy --package orkee-projects -- -D warnings
        cargo clippy --package orkee-config -- -D warnings

    - name: Run Rust tests (CLI & Server)
      run: |
        cargo test --package orkee-cli
        cargo test --package orkee-projects
        cargo test --package orkee-config

  # Tauri tests - Desktop app with system dependencies
  # Longer running due to Tauri framework overhead
  test-tauri:
    name: Test Tauri (Desktop App)
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # stable
      with:
        toolchain: stable

    - name: Install Linux dependencies
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: Cache Rust dependencies
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tauri-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-tauri-

    - name: Run Clippy (Tauri)
      run: cargo clippy --package orkee-desktop -- -D warnings
      working-directory: packages/dashboard/src-tauri

    - name: Run Tauri tests
      run: cargo test
      working-directory: packages/dashboard/src-tauri

  # Summary job - required for branch protection
  # This job succeeds only if all test jobs pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test-web, test-rust, test-tauri]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-web.result }}" != "success" ]; then
            echo "test-web failed"
            exit 1
          fi
          if [ "${{ needs.test-rust.result }}" != "success" ]; then
            echo "test-rust failed"
            exit 1
          fi
          if [ "${{ needs.test-tauri.result }}" != "success" ]; then
            echo "test-tauri failed"
            exit 1
          fi
          echo "All tests passed!"
