name: Build Multi-Platform Binaries

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run Rust security audit
        run: cargo audit

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: "1.2.23"

      - name: Install dashboard dependencies
        run: |
          cd packages/dashboard
          bun install

      # NOTE: bun audit temporarily disabled - esbuild dev vulnerability doesn't affect production
      # TODO: Update esbuild and re-enable audit
      # - name: Run Bun security audit
      #   run: |
      #     cd packages/dashboard
      #     bun audit

  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: [audit]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macOS-x64
            os: macos-13  # Intel Mac runner
            target: x86_64-apple-darwin
            binary: orkee
            command: cargo
            
          - name: macOS-arm64
            os: macos-14  # M1 Mac runner
            target: aarch64-apple-darwin
            binary: orkee
            command: cargo
            
          - name: Linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: orkee
            command: cargo
            
          - name: Linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: orkee
            command: cargo
            use_cross: true
            
          - name: Windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: orkee.exe
            command: cargo
            
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          targets: ${{ matrix.platform.target }}
          
      - name: Setup Linux ARM64 cross-compilation
        if: matrix.platform.use_cross == true
        run: |
          # Install the ARM64 cross-compilation toolchain
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
          # Configure cargo for cross-compilation
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          
          [env]
          CC_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-gcc"
          CXX_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-g++"
          AR_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-ar"
          EOF
          
      - name: Cache Cargo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
            ${{ runner.os }}-cargo-
            
      - name: Build
        shell: bash
        run: |
          echo "Building orkee for ${{ matrix.platform.target }}..."
          cd packages/cli
          ${{ matrix.platform.command }} build --release --target ${{ matrix.platform.target }} --bin orkee
          cd ../..
          echo "Build completed, checking output..."
          ls -la target/${{ matrix.platform.target }}/release/ || true

      - name: Verify Binary
        shell: bash
        # Skip verification for cross-compiled builds (can't run ARM64 on x64 runners)
        if: matrix.platform.use_cross != true
        run: |
          BINARY_PATH="target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}"
          echo "Verifying binary at: $BINARY_PATH"

          # Make sure the binary exists
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Error: Binary not found at $BINARY_PATH"
            exit 1
          fi

          # Make it executable (needed on Unix-like systems)
          chmod +x "$BINARY_PATH" 2>/dev/null || true

          # Run smoke test
          echo "Running smoke test: $BINARY_PATH --version"
          "$BINARY_PATH" --version

          # Verify exit code
          if [ $? -eq 0 ]; then
            echo "✓ Smoke test passed: Binary is functional"
          else
            echo "✗ Smoke test failed: Binary returned non-zero exit code"
            exit 1
          fi

      - name: Package Binary
        shell: bash
        run: |
          # Debug: List possible target locations
          echo "Checking for binary in workspace root target..."
          ls -la target/${{ matrix.platform.target }}/release/ 2>/dev/null || echo "Not in workspace root"
          
          # The target directory is at the workspace root when using cargo workspaces
          BINARY_PATH="target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}"
          
          if [ -f "$BINARY_PATH" ]; then
            echo "Found binary at: $BINARY_PATH"
            
            if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
              7z a orkee-${{ matrix.platform.target }}.zip "$BINARY_PATH"
            else
              tar czf orkee-${{ matrix.platform.target }}.tar.gz -C target/${{ matrix.platform.target }}/release ${{ matrix.platform.binary }}
            fi
            
            echo "Package created:"
            ls -la orkee-${{ matrix.platform.target }}.*
          else
            echo "Error: Binary not found at expected location: $BINARY_PATH"
            echo "Looking for binary in all possible locations..."
            find . -name "${{ matrix.platform.binary }}" -type f 2>/dev/null | head -10
            exit 1
          fi
          
      - name: Upload Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: orkee-${{ matrix.platform.target }}
          path: |
            orkee-${{ matrix.platform.target }}.tar.gz
            orkee-${{ matrix.platform.target }}.zip
          if-no-files-found: error
          retention-days: 30

  package-dashboard:
    name: Package Dashboard (Source & Dist)
    runs-on: ubuntu-latest
    needs: [audit]
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: "1.2.23"

      - name: Build Dashboard
        run: |
          echo "Building dashboard production bundle..."
          cd packages/dashboard

          # Install dependencies
          bun install

          # Build production bundle
          bun run build

          # Check build output
          echo "Build output:"
          ls -la dist/
          du -sh dist/

          cd ../..

      - name: Create dashboard dist package
        run: |
          echo "Creating dashboard dist package..."
          cd packages/dashboard

          # Package the built files
          tar czf ../../orkee-dashboard-dist.tar.gz dist/

          cd ../..
          echo "Dashboard dist package created:"
          ls -lh orkee-dashboard-dist.tar.gz

      - name: Create dashboard source package
        run: |
          echo "Creating dashboard source package..."
          cd packages/dashboard

          # Create tarball of dashboard source (for developers)
          tar czf ../../orkee-dashboard-source.tar.gz \
            --exclude="node_modules" \
            --exclude="dist" \
            --exclude=".turbo" \
            .

          cd ../..
          echo "Dashboard source package created:"
          ls -lh orkee-dashboard-source.tar.gz

      - name: Upload Dashboard Packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: orkee-dashboard-packages
          path: |
            orkee-dashboard-dist.tar.gz
            orkee-dashboard-source.tar.gz
          retention-days: 30

  release:
    name: Create Release
    needs: [build, package-dashboard]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Download all artifacts
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          path: artifacts

      - name: List artifacts
        run: ls -laR artifacts/

      - name: Generate checksums
        run: |
          echo "Generating SHA256 checksums for all artifacts..."
          cd artifacts

          # Find all .tar.gz and .zip files and generate checksums
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > ../checksums.txt

          cd ..

          echo "Checksums generated:"
          cat checksums.txt

          # Create a formatted checksums file for release notes
          echo "# SHA256 Checksums" > checksums-formatted.txt
          echo "" >> checksums-formatted.txt
          echo "\`\`\`" >> checksums-formatted.txt
          cat checksums.txt >> checksums-formatted.txt
          echo "\`\`\`" >> checksums-formatted.txt

          echo "Formatted checksums:"
          cat checksums-formatted.txt

      - name: Create Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            checksums.txt
          body_path: checksums-formatted.txt
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}