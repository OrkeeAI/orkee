name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  pr-title:
    name: PR Title Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert

  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docs: ${{ steps.filter.outputs.docs }}
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          rust:
            - '**/*.rs'
            - '**/Cargo.toml'
            - '**/Cargo.lock'
          frontend:
            - 'packages/dashboard/**'
            - 'pnpm-lock.yaml'
            - 'package.json'
          docs:
            - '**/*.md'
            - 'docs/**'

  security-audit:
    name: Security Audit
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run cargo audit
      run: cargo audit
      continue-on-error: true
      
    - name: Setup Node.js for npm audit
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install pnpm
      if: needs.changes.outputs.frontend == 'true'
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      if: needs.changes.outputs.frontend == 'true'
      run: pnpm install
      
    - name: Run pnpm audit
      if: needs.changes.outputs.frontend == 'true'
      run: pnpm audit --prod
      continue-on-error: true

  rust-checks:
    name: Rust Checks
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check for unsafe code
      run: |
        # Check for actual unsafe Rust code blocks (not strings containing 'unsafe')
        ! grep -rE "^[[:space:]]*unsafe[[:space:]]*\{" --include="*.rs" packages/ || echo "::warning::Unsafe code blocks detected"
        ! grep -rE "unsafe[[:space:]]+fn" --include="*.rs" packages/ || echo "::warning::Unsafe functions detected"
        ! grep -rE "unsafe[[:space:]]+impl" --include="*.rs" packages/ || echo "::warning::Unsafe impl blocks detected"
        ! grep -rE "unsafe[[:space:]]+trait" --include="*.rs" packages/ || echo "::warning::Unsafe traits detected"
    
    - name: Run tests
      run: cargo test --all --all-features

  frontend-checks:
    name: Frontend Checks
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Lint
      run: pnpm lint
      working-directory: packages/dashboard
    
    - name: Type check
      run: pnpm tsc --noEmit
      working-directory: packages/dashboard
    
    - name: Build
      run: pnpm build
      working-directory: packages/dashboard

  size-check:
    name: Bundle Size Check
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build and analyze bundle
      run: |
        pnpm build
        echo "Bundle size report:"
        du -sh packages/dashboard/dist

  pr-comment:
    name: PR Comment
    needs: [rust-checks, frontend-checks, security-audit]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const rustStatus = '${{ needs.rust-checks.result }}';
          const frontendStatus = '${{ needs.frontend-checks.result }}';
          const securityStatus = '${{ needs.security-audit.result }}';
          
          let comment = '## PR Check Results\n\n';
          comment += `- Rust Checks: ${rustStatus === 'success' ? '✅' : rustStatus === 'skipped' ? '⏭️' : '❌'}\n`;
          comment += `- Frontend Checks: ${frontendStatus === 'success' ? '✅' : frontendStatus === 'skipped' ? '⏭️' : '❌'}\n`;
          comment += `- Security Audit: ${securityStatus === 'success' ? '✅' : securityStatus === 'skipped' ? '⏭️' : '⚠️'}\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });