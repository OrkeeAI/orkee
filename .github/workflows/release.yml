name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build binaries for all platforms
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: orkee-aarch64-apple-darwin.tar.gz
            
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: orkee-x86_64-apple-darwin.tar.gz
            
          # Linux x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: orkee-x86_64-unknown-linux-gnu.tar.gz
            
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: orkee-aarch64-unknown-linux-gnu.tar.gz
            use_cross: true
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: orkee-x86_64-pc-windows-msvc.zip
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          
      - name: Install cross-compilation tools
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          
      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin orkee
          else
            cargo build --release --target ${{ matrix.target }} --bin orkee
          fi
        shell: bash
        
      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.archive }} orkee
          cd ../../..
          
      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.archive }} orkee.exe
          cd ../../..
        shell: bash
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: ${{ matrix.archive }}

  # Create GitHub release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./artifacts
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release Notes
        id: notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Orkee v${{ steps.version.outputs.version }}
          
          ### Features
          - 🤖 AI Agent Orchestration
          - 📊 Real-time Dashboard
          - 🖥️ Terminal Interface (TUI)
          - 🔧 CLI Tools
          - 🔗 Workflow Coordination
          - ☁️ Cloud Sync (optional)
          - 🔐 Enterprise Security
          - 🔒 HTTPS/TLS Support
          
          ### Installation
          
          #### Via npm (recommended)
          ```bash
          npm install -g orkee
          ```
          
          #### Direct Download
          Download the appropriate binary for your platform from the assets below.
          
          ### Supported Platforms
          - macOS (Apple Silicon & Intel)
          - Linux (x64 & ARM64)
          - Windows (x64)
          
          ### Getting Started
          ```bash
          orkee --help
          orkee dashboard
          orkee tui
          ```
          
          See [README](https://github.com/OrkeeAI/orkee#readme) for full documentation.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Orkee v${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: ./artifacts/*
          draft: false
          prerelease: false

  # Publish to NPM
  npm-publish:
    name: Publish to NPM
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          
      - name: Update package version
        run: |
          cd npm
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          
      - name: Publish to NPM
        run: |
          cd npm
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}