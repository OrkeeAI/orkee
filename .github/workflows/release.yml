name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build and package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      CARGO_TERM_COLOR: always
      VERSION: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate version consistency
        shell: bash
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          
          # Check workspace version
          WORKSPACE_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$TAG_VERSION" != "$WORKSPACE_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match workspace version ($WORKSPACE_VERSION)"
            exit 1
          fi
          
          # Check CLI package version
          CLI_VERSION=$(grep '^version = ' packages/cli/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$TAG_VERSION" != "$CLI_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match CLI package version ($CLI_VERSION)"
            exit 1
          fi
          
          # Check MCP server package version
          MCP_VERSION=$(grep '^version = ' packages/mcp-server/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$TAG_VERSION" != "$MCP_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match MCP server version ($MCP_VERSION)"
            exit 1
          fi
          
          echo "✅ Version validation passed: $TAG_VERSION"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --all --all-features

      - name: Build release binaries
        run: cargo build --release -p orkee-cli -p orkee-mcp-server

      - name: Determine target triple (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "TARGET=$(rustc -vV | sed -n 's/^host: //p')" >> "$GITHUB_ENV"

      - name: Determine target triple (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $hostLine = (rustc -vV | Select-String '^host: ').Line
          $target = $hostLine.Split(':')[1].Trim()
          "TARGET=$target" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Package artifacts (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p dist
          cp target/release/orkee dist/orkee
          cp target/release/orkee-mcp dist/orkee-mcp
          cd dist
          zip -9 "orkee-${VERSION}-${TARGET}.zip" orkee
          zip -9 "orkee-mcp-${VERSION}-${TARGET}.zip" orkee-mcp
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 *.zip > "SHA256SUMS-${TARGET}.txt"
          else
            sha256sum *.zip > "SHA256SUMS-${TARGET}.txt"
          fi

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Path dist | Out-Null
          Copy-Item "target\release\orkee.exe" "dist\orkee.exe"
          Copy-Item "target\release\orkee-mcp.exe" "dist\orkee-mcp.exe"
          Compress-Archive -Path "dist\orkee.exe" -DestinationPath "dist\orkee-$env:VERSION-$env:TARGET.zip"
          Compress-Archive -Path "dist\orkee-mcp.exe" -DestinationPath "dist\orkee-mcp-$env:VERSION-$env:TARGET.zip"
          Get-FileHash "dist\orkee-$env:VERSION-$env:TARGET.zip" -Algorithm SHA256 | ForEach-Object { $_.Hash + "  orkee-$env:VERSION-$env:TARGET.zip" } | Out-File "dist\SHA256SUMS-$env:TARGET.txt" -Append
          Get-FileHash "dist\orkee-mcp-$env:VERSION-$env:TARGET.zip" -Algorithm SHA256 | ForEach-Object { $_.Hash + "  orkee-mcp-$env:VERSION-$env:TARGET.zip" } | Out-File "dist\SHA256SUMS-$env:TARGET.txt" -Append

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ env.TARGET || 'unknown' }}
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          allowUpdates: true
          generateReleaseNotes: true
          artifacts: "release/*"
          artifactErrorsFailBuild: true
