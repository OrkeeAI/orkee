# Orkee Nginx Configuration - Basic Setup
# This configuration provides HTTP to HTTPS redirect and basic HTTPS proxy

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;

# Upstream backend configuration
upstream orkee_backend {
    server 127.0.0.1:4001;
    
    # For load balancing, add more servers:
    # server 127.0.0.1:4002;
    # server 127.0.0.1:4003;
    
    # Connection pooling
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# HTTP server - redirects to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com;  # Replace with your domain
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    # Health check (allow HTTP for monitoring)
    location /api/health {
        access_log off;
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Rate limiting for health checks
        limit_req zone=health burst=10 nodelay;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server - main application
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com;  # Replace with your domain
    
    # SSL certificate configuration
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;  # Replace with your domain
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;  # Replace with your domain
    
    # Include SSL security parameters
    include /etc/nginx/snippets/ssl-params.conf;
    
    # Logging
    access_log /var/log/nginx/orkee-access.log combined;
    error_log /var/log/nginx/orkee-error.log warn;
    
    # Health check endpoint (monitoring)
    location /api/health {
        access_log off;
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Rate limiting for health checks
        limit_req zone=health burst=10 nodelay;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Rate limiting for API calls
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers (if needed)
        add_header Access-Control-Allow-Origin "https://your-domain.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://your-domain.com";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
        }
    }
    
    # Static assets (if serving dashboard through Nginx)
    location /assets/ {
        root /usr/share/orkee/dashboard;
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Security headers for static assets
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }
    
    # Dashboard (if serving through Nginx)
    location / {
        try_files $uri $uri/ @orkee;
    }
    
    # Fallback to Orkee application
    location @orkee {
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Rate limiting for general requests
        limit_req zone=api burst=20 nodelay;
    }
    
    # Security: Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Default server block to handle requests to IP or unknown domains
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    
    # SSL configuration for default server
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    
    server_name _;
    
    # Return 444 (connection closed) for unknown domains
    return 444;
}