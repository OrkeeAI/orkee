# Orkee Nginx Configuration - Advanced SSL/TLS Setup
# This configuration provides enhanced security, performance, and modern features

# Rate limiting zones with different limits for different endpoints
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=health:10m rate=60r/s;
limit_req_zone $binary_remote_addr zone=browse:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=projects:10m rate=15r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=perip:10m;

# Upstream backend configuration with advanced features
upstream orkee_backend {
    # Main servers
    server 127.0.0.1:4001 weight=3 max_fails=3 fail_timeout=30s;
    
    # Additional servers for high availability
    # server 127.0.0.1:4002 weight=2 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:4003 weight=1 max_fails=3 fail_timeout=30s backup;
    
    # Load balancing method
    least_conn;
    
    # Connection pooling
    keepalive 64;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# HTTP server - secure redirects only
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;  # Replace with your domain(s)
    
    # Security headers even for redirects
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    # Health check endpoint (allow HTTP for internal monitoring)
    location = /api/health {
        access_log off;
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Rate limiting
        limit_req zone=health burst=20 nodelay;
        
        # Restrict to internal networks only
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server - main application with advanced features
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    # HTTP/3 support (requires nginx 1.25+)
    # listen 443 quic reuseport;
    # listen [::]:443 quic reuseport;
    
    server_name your-domain.com www.your-domain.com;  # Replace with your domain(s)
    
    # SSL certificate configuration
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;  # Replace
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;  # Replace
    
    # Include SSL security parameters
    include /etc/nginx/snippets/ssl-params.conf;
    
    # HTTP/3 advertisement
    # add_header Alt-Svc 'h3=":443"; ma=86400' always;
    
    # Connection limiting
    limit_conn perip 20;
    
    # Logging with enhanced format
    log_format orkee_access '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'request_id=$request_id';
    
    access_log /var/log/nginx/orkee-access.log orkee_access;
    error_log /var/log/nginx/orkee-error.log warn;
    
    # Request ID for tracing
    add_header X-Request-ID $request_id always;
    
    # Health check endpoint (monitoring with enhanced logging)
    location = /api/health {
        access_log /var/log/nginx/orkee-health.log orkee_access;
        
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Enhanced headers for health checks
        proxy_set_header X-Health-Check "true";
        proxy_set_header X-Request-ID $request_id;
        
        # Rate limiting
        limit_req zone=health burst=30 nodelay;
    }
    
    # API endpoints with specific rate limiting
    location ~ ^/api/(projects|directories) {
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Enhanced security headers
        add_header X-Request-ID $request_id always;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        
        # Specific rate limits based on endpoint
        if ($uri ~ "directories") {
            limit_req zone=browse burst=10 nodelay;
        }
        if ($uri ~ "projects") {
            limit_req zone=projects burst=15 nodelay;
        }
        
        # CORS configuration
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://your-domain.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Request-ID" always;
            add_header Access-Control-Max-Age 3600 always;
            add_header Content-Type "text/plain charset=UTF-8" always;
            add_header Content-Length 0 always;
            return 204;
        }
    }
    
    # General API endpoints
    location /api/ {
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Security headers
        add_header X-Request-ID $request_id always;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Block common attack patterns
        if ($request_uri ~* "(\.\./|\.\.\\|\.\.%2F|\.\.%5C)") {
            return 403;
        }
        
        if ($request_uri ~* "(union|select|insert|delete|update|drop|exec|script)" ) {
            return 403;
        }
    }
    
    # WebSocket support for real-time features
    location /ws {
        proxy_pass http://orkee_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # WebSocket specific settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        
        # Rate limiting for WebSocket connections
        limit_req zone=api burst=5 nodelay;
    }
    
    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /usr/share/orkee/dashboard;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Request-ID $request_id always;
        
        # Security headers for static assets
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # Enable gzip for static assets
        gzip_static on;
        
        # Fallback to Orkee if file not found
        try_files $uri @orkee;
    }
    
    # Dashboard root
    location / {
        # Try to serve static files first, then fallback to Orkee
        root /usr/share/orkee/dashboard;
        try_files $uri $uri/ @orkee;
        
        # Security headers
        add_header X-Request-ID $request_id always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }
    
    # Fallback to Orkee application
    location @orkee {
        proxy_pass http://orkee_backend;
        include /etc/nginx/snippets/proxy-params.conf;
        
        # Headers for SPA routing
        add_header X-Request-ID $request_id always;
        proxy_set_header X-Original-URI $request_uri;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
    }
    
    # Security: Block access to sensitive files and directories
    location ~ /\.(ht|env|git) {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    # Block access to potential backup files
    location ~* \.(bak|backup|old|orig|save)$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    # Security headers for all responses
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
}

# Default server block - enhanced security
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    
    # Use self-signed certificate for unknown domains
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    
    server_name _;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Log suspicious requests
    access_log /var/log/nginx/unknown-domains.log combined;
    
    # Return 444 (connection closed) for unknown domains
    return 444;
}